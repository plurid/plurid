/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["c"] = rotateXMatrix;
/* harmony export (immutable) */ __webpack_exports__["d"] = rotateYMatrix;
/* unused harmony export rotateZMatrix */
/* harmony export (immutable) */ __webpack_exports__["f"] = translateMatrix;
/* harmony export (immutable) */ __webpack_exports__["e"] = scaleMatrix;
/* unused harmony export multiplyMatrices */
/* harmony export (immutable) */ __webpack_exports__["b"] = multiplyArrayOfMatrices;
/* harmony export (immutable) */ __webpack_exports__["a"] = matrixArrayToCssMatrix;
// Matrix Operations for Single Value (De-)Composition
// Sourced from https://github.com/gregtatum/mdn-webgl/blob/master/library/matrices.js
function rotateXMatrix(a) {
    var cos = Math.cos;
    var sin = Math.sin;

    return [
         1,       0,        0,     0,
         0,  cos(a),  -sin(a),     0,
         0,  sin(a),   cos(a),     0,
         0,       0,        0,     1
    ];
}


function rotateYMatrix(a) {
    var cos = Math.cos;
    var sin = Math.sin;

    return [
         cos(a),   0, sin(a),   0,
              0,   1,      0,   0,
        -sin(a),   0, cos(a),   0,
              0,   0,      0,   1
    ];
}


function rotateZMatrix(a) {
    var cos = Math.cos;
    var sin = Math.sin;

    return [
        cos(a), -sin(a),    0,    0,
        sin(a),  cos(a),    0,    0,
             0,       0,    1,    0,
             0,       0,    0,    1
    ];
}


function translateMatrix(x, y, z) {
	return [
	    1,    0,    0,   0,
	    0,    1,    0,   0,
	    0,    0,    1,   0,
	    x,    y,    z,   1
	];
}


function scaleMatrix(s) {
	return [
	    s,    0,    0,   0,
	    0,    s,    0,   0,
	    0,    0,    s,   0,
	    0,    0,    0,   1
	];
}


function multiplyMatrices(a, b) {
    // https://github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js#L306-L337

    var result = [];

    var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3],
        a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7],
        a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11],
        a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];

    // Cache only the current line of the second matrix
    var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];
    result[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    result[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    result[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    result[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];
    result[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    result[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    result[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    result[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];
    result[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    result[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    result[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    result[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];
    result[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;
    result[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;
    result[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;
    result[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;

    return result;
}


function multiplyArrayOfMatrices(matrices) {
    var inputMatrix = matrices[0];

    for(var i=1; i < matrices.length; i++) {
      inputMatrix = multiplyMatrices(inputMatrix, matrices[i]);
    }

    return inputMatrix;
}


// Create the matrix3d style property from a matrix array
function matrixArrayToCssMatrix(array) {
    return 'matrix3d(' + array.join(',') + ')';
}


/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(2);

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

// require JS files
__webpack_require__(3);


// require Sass main file
__webpack_require__(6);

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__matrix_js__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_js__ = __webpack_require__(4);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__bridges_js__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__bridges_js___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2__bridges_js__);




var pluridContainer = document.getElementsByClassName('plurid-container');


// Basic Rotation, Translation, Scaling of the Plurid Card
for (var i = 0; i < pluridContainer.length; i++) {
    pluridContainer[i].addEventListener("mousemove", function(event) {
        // console.log(this.children[0]);
        if (!!event.shiftKey) {
            rotatePlurid(event, this.children[0]);
        }

        if (!!event.altKey) {
            translatePlurid(event, this.children[0])
        }

        if (!!event.ctrlKey || !!event.metaKey) {
            scalePlurid(event, this.children[0])
        }
    });
}

// var pluridSheets = document.getElementsByClassName('plurid-sheet');

// console.log(pluridSheets[0]);

// for (var i = 0; i < pluridContainer.length; i++) {
//     pluridSheets[0].addEventListener("mousemove", function(event) {
//         // console.log(this.children[0]);
//         if (!!event.shiftKey) {
//             rotatePlurid(event, this);
//         }

//         if (!!event.altKey) {
//             translatePlurid(event, this)
//         }

//         if (!!event.ctrlKey || !!event.metaKey) {
//             scalePlurid(event, this)
//         }
//     });
// }


// Reset Transforms at Double Click
for (var i = 0; i < pluridContainer.length; i++) {
    pluridContainer[i].addEventListener('dblclick', function(event) {
        var plurid = this.children[0];
        var valrotationXMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["c" /* rotateXMatrix */](0);
        var valrotationYMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["d" /* rotateYMatrix */](0);
        var valtranslationMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["f" /* translateMatrix */](0, 0, 0);
        var valscaleMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["e" /* scaleMatrix */](1);

        var xPosition = event.clientX;
        var yPosition = event.clientY
        var xPosPercentarge = xPosition/window.innerWidth;
        var yPosPercentarge = yPosition/window.innerWidth;

        __WEBPACK_IMPORTED_MODULE_1__utils_js__["e" /* setTransform */](plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, xPosPercentarge, yPosPercentarge);
    });
}


function rotatePlurid(event, plurid) {
    var direction = __WEBPACK_IMPORTED_MODULE_1__utils_js__["a" /* getMouseDirection */](event);
    // console.log("Direction", direction);

    var rotateX = __WEBPACK_IMPORTED_MODULE_1__utils_js__["b" /* getTransformRotate */](plurid).rotateX;
    var rotateY = __WEBPACK_IMPORTED_MODULE_1__utils_js__["b" /* getTransformRotate */](plurid).rotateY;
    var translateX = __WEBPACK_IMPORTED_MODULE_1__utils_js__["d" /* getTransformTranslate */](plurid).translateX;
    var translateY = __WEBPACK_IMPORTED_MODULE_1__utils_js__["d" /* getTransformTranslate */](plurid).translateY;
    var translateZ = 0;
    var scale = __WEBPACK_IMPORTED_MODULE_1__utils_js__["c" /* getTransformScale */](plurid).scale;

    var valrotationXMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["c" /* rotateXMatrix */](-1 * rotateX);
    var valrotationYMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["d" /* rotateYMatrix */](-1 * rotateY);
    var valtranslationMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["f" /* translateMatrix */](translateX, translateY, 0);
    var valscaleMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["e" /* scaleMatrix */](scale);

    // console.log("----------------------------------")
    // console.log("Rotate X", rotateX);
    // console.log("Rotate X in Degrees", rotateX*180/Math.PI);
    // console.log("Rotate Y",rotateY);
    // console.log("Rotate Y in Degrees",rotateY*180/Math.PI);
    // console.log("Rotate Y",rotateY);
    // console.log("Translate X", translateX);
    // console.log("Translate Y", translateY);
    // console.log("Scale", scale);

    var xPosition = event.clientX;
    var yPosition = event.clientY
    var xPosPercentarge = xPosition/window.innerWidth;
    var yPosPercentarge = yPosition/window.innerWidth;
    // console.log(xPosition, xPosition);
    // console.log(xPosPercentarge, yPosPercentarge);

    var angleIncrement = 0.08;


    // ISSUE
    // issue with the angle jumping over 2*pi


    if (direction === "left") {
        rotateY -= angleIncrement;
        valrotationYMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["d" /* rotateYMatrix */](-1 * rotateY);

        // console.log("valrotationXMatrix", valrotationXMatrix);
        // console.log("valrotationYMatrix", valrotationYMatrix);
        // console.log("valtranslationMatrix", valtranslationMatrix);
        // console.log("valscaleMatrix", valscaleMatrix);

        __WEBPACK_IMPORTED_MODULE_1__utils_js__["e" /* setTransform */](plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, xPosPercentarge, yPosPercentarge);
    }

    if (direction === "right") {
        rotateY += angleIncrement;
        valrotationYMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["d" /* rotateYMatrix */](-1 * rotateY);

        __WEBPACK_IMPORTED_MODULE_1__utils_js__["e" /* setTransform */](plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, xPosPercentarge, yPosPercentarge);
    }

    // if (direction === "up") {
    //     rotateX += angleIncrement;
    //     valrotationXMatrix = rotateXMatrix(-1 * rotateX);

    //     utils.setTransform(plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, xPosPercentarge, yPosPercentarge);
    // }

    // if (direction === "down") {
    //     rotateX -= angleIncrement;

    //     valrotationXMatrix = rotateXMatrix(-1 * rotateX);

    //     utils.setTransform(plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, xPosPercentarge, yPosPercentarge);
    // }
}


function translatePlurid(event, plurid) {
    var direction = __WEBPACK_IMPORTED_MODULE_1__utils_js__["a" /* getMouseDirection */](event);
    // console.log("Direction", direction);

    var rotateX = __WEBPACK_IMPORTED_MODULE_1__utils_js__["b" /* getTransformRotate */](plurid).rotateX;
    var rotateY = __WEBPACK_IMPORTED_MODULE_1__utils_js__["b" /* getTransformRotate */](plurid).rotateY;
    var translateX = __WEBPACK_IMPORTED_MODULE_1__utils_js__["d" /* getTransformTranslate */](plurid).translateX;
    var translateY = __WEBPACK_IMPORTED_MODULE_1__utils_js__["d" /* getTransformTranslate */](plurid).translateY;
    var translateZ = 0;
    var scale = __WEBPACK_IMPORTED_MODULE_1__utils_js__["c" /* getTransformScale */](plurid).scale;

    var valrotationXMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["c" /* rotateXMatrix */](-1 * rotateX);
    var valrotationYMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["d" /* rotateYMatrix */](-1 * rotateY);
    var valtranslationMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["f" /* translateMatrix */](translateX, translateY, 0);
    var valscaleMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["e" /* scaleMatrix */](scale);

    var xPosition = event.clientX;
    var yPosition = event.clientY
    var xPosPercentarge = xPosition/window.innerWidth;
    var yPosPercentarge = yPosition/window.innerWidth;
    // console.log(xPosition, xPosition);
    // console.log(xPosPercentarge, yPosPercentarge);

    var linearIncrement = 10;

    // console.log("----------------------------------")
    // console.log("Rotate X", rotateX);
    // console.log("Rotate Y",rotateY);
    // console.log("Translate X", translateX);
    // console.log("Translate Y", translateY);
    // console.log("Scale", scale);
    // console.log("getRotateXMatrix", getRotateXMatrix);
    // console.log("getRotateYMatrix", getRotateYMatrix);
    // console.log("getTranslateMatrix", getTranslateMatrix);
    // console.log("getScaleMatrix", getScaleMatrix);


    if (direction === "left") {
        translateX -= linearIncrement;
        var valtranslationMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["f" /* translateMatrix */](translateX, translateY, translateZ);

        // console.log("valrotationXMatrix", valrotationXMatrix);
        // console.log("valrotationYMatrix", valrotationYMatrix);
        // console.log("valtranslationMatrix", valtranslationMatrix);
        // console.log("valscaleMatrix", valscaleMatrix);

        __WEBPACK_IMPORTED_MODULE_1__utils_js__["e" /* setTransform */](plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, xPosPercentarge, yPosPercentarge);
    }

    if (direction === "right") {
        translateX += linearIncrement;
        var valtranslationMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["f" /* translateMatrix */](translateX, translateY, translateZ);

        __WEBPACK_IMPORTED_MODULE_1__utils_js__["e" /* setTransform */](plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, xPosPercentarge, yPosPercentarge);
    }

    if (direction === "up") {
        translateY -= linearIncrement;
        var valtranslationMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["f" /* translateMatrix */](translateX, translateY, translateZ);

        __WEBPACK_IMPORTED_MODULE_1__utils_js__["e" /* setTransform */](plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, xPosPercentarge, yPosPercentarge);
    }

    if (direction === "down") {
        translateY += linearIncrement;
        var valtranslationMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["f" /* translateMatrix */](translateX, translateY, translateZ);

        __WEBPACK_IMPORTED_MODULE_1__utils_js__["e" /* setTransform */](plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, xPosPercentarge, yPosPercentarge);
    }
}


function scalePlurid(event, plurid) {
    var direction = __WEBPACK_IMPORTED_MODULE_1__utils_js__["a" /* getMouseDirection */](event);
    // console.log("Direction", direction);

    var rotateX = __WEBPACK_IMPORTED_MODULE_1__utils_js__["b" /* getTransformRotate */](plurid).rotateX;
    var rotateY = __WEBPACK_IMPORTED_MODULE_1__utils_js__["b" /* getTransformRotate */](plurid).rotateY;
    var translateX = __WEBPACK_IMPORTED_MODULE_1__utils_js__["d" /* getTransformTranslate */](plurid).translateX;
    var translateY = __WEBPACK_IMPORTED_MODULE_1__utils_js__["d" /* getTransformTranslate */](plurid).translateY;
    var translateZ = 0;
    var scale = __WEBPACK_IMPORTED_MODULE_1__utils_js__["c" /* getTransformScale */](plurid).scale;

    var valrotationXMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["c" /* rotateXMatrix */](-1 * rotateX);
    var valrotationYMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["d" /* rotateYMatrix */](-1 * rotateY);
    var valtranslationMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["f" /* translateMatrix */](translateX, translateY, 0);
    var valscaleMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["e" /* scaleMatrix */](scale);

    var scaleIncrement = 0.05;

    // console.log("----------------------------------")
    // console.log("Rotate X", rotateX);
    // console.log("Rotate Y",rotateY);
    // console.log("Translate X", translateX);
    // console.log("Translate Y", translateY);
    // console.log("Scale", scale);
    // console.log("getRotateXMatrix", getRotateXMatrix);
    // console.log("getRotateYMatrix", getRotateYMatrix);
    // console.log("getTranslateMatrix", getTranslateMatrix);
    // console.log("getScaleMatrix", getScaleMatrix);

    var xPosition = event.clientX;
    var yPosition = event.clientY
    var xPosPercentarge = xPosition/window.innerWidth;
    var yPosPercentarge = yPosition/window.innerWidth;
    // console.log(xPosition, xPosition);
    // console.log(xPosPercentarge, yPosPercentarge);

    if (direction === "up") {
        scale += scaleIncrement;

        if (scale > 4) {
            scale = 4
        }

        var valscaleMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["e" /* scaleMatrix */](scale);

        __WEBPACK_IMPORTED_MODULE_1__utils_js__["e" /* setTransform */](plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, xPosPercentarge, yPosPercentarge);
    }

    if (direction === "down") {
        scale -= scaleIncrement;

        if (scale < 0.1) {
            scale = 0.1
        }

        var valscaleMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["e" /* scaleMatrix */](scale);

        __WEBPACK_IMPORTED_MODULE_1__utils_js__["e" /* setTransform */](plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, xPosPercentarge, yPosPercentarge);
    }
}





/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = getMouseDirection;
/* harmony export (immutable) */ __webpack_exports__["b"] = getTransformRotate;
/* harmony export (immutable) */ __webpack_exports__["d"] = getTransformTranslate;
/* harmony export (immutable) */ __webpack_exports__["c"] = getTransformScale;
/* unused harmony export getMatrixValues */
/* unused harmony export getRotationMatrix */
/* unused harmony export getTranslationMatrix */
/* unused harmony export getScaleMatrix */
/* harmony export (immutable) */ __webpack_exports__["e"] = setTransform;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__matrix_js__ = __webpack_require__(0);
// Utilities Functions
// Get User's Mouse Direction
// Get Transform Values and Decomposed Matrix from CSS




function getMouseDirection(event) {
    var direction = "";

    if (event.movementX < 0 ) {
        direction = "left";
    } else if (event.movementX > 0) {
        direction = "right";
    }

    if (event.movementY < 0) {
        direction = "up";
    } else if (event.movementY > 0) {
        direction = "down";
    }

    // console.log('----- direction: ', direction)
    // console.log('movementX: ', event.movementX)
    // console.log('movementY: ', event.movementY)
    return direction;
}


function getTransformRotate(element) {
    var values = getRotationMatrix(element);
    // console.log("getTransformRotate Matrix", values);

    var rotateX,
        rotateY;

    var pi = Math.PI;

    if (values.length == 6) {
        var cosa = parseFloat(values[0]);
        var sina = parseFloat(values[1]);
        // console.log("cos A", cosa);
        // console.log("sin A", sina);

        if (cosa == 1 && sina == 0) {
            rotateX = Math.asin(sina);
            rotateY = Math.acos(cosa);
        }
    }

    if (values.length == 16) {
        var cosaX = parseFloat(values[5]);
        var sinaX = parseFloat(values[9]);
        // console.log("cos A X", cosaX);
        // console.log("sin A X", sinaX);

        // 0-180
        if (sinaX <= 0) {
            rotateX = Math.acos(cosaX);
        }

        // 181-360
        if (sinaX > 0) {
            rotateX = 2*pi - Math.acos(cosaX);
        }

        // console.log("rotateX in Radians", rotateX);
        // console.log("rotateX in Degrees", rotateX*180/pi);


        var cosaY = parseFloat(values[0]);
        var sinaY = parseFloat(values[2]);
        // console.log("cos A Y", cosaY);
        // console.log("sin A Y", sinaY);

        // 0-180
        if (sinaY <= 0) {
            rotateY = Math.acos(cosaY);
        }

        // 181-360
        if (sinaY > 0) {
            rotateY = 2*pi - Math.acos(cosaY);
        }

        // console.log("rotateY in Radians", rotateY);
        // console.log("rotateY in Degrees", rotateY*180/pi);
    }

    return {
        rotateX: rotateX,
        rotateY: rotateY
    };
}


function getTransformTranslate(element) {
    var values = getTranslationMatrix(element);

    var translateX,
        translateY;

    translateX = parseFloat(values[0]);
    translateY = parseFloat(values[1]);

    return {
        translateX: translateX,
        translateY: translateY
    };
}


function getTransformScale(element) {
    var scale = getScaleMatrix(element);
    // console.log(scale);

    return {
        scale: scale
    }
}


function getMatrixValues(element) {
    var transformValues = window.getComputedStyle(element, null).getPropertyValue("transform");
    var matrixValues = transformValues.split('(')[1].split(')')[0].split(',');

    for (var i = 0; i < matrixValues.length; i++) {
        matrixValues[i] = parseFloat(matrixValues[i]);
    }

    return matrixValues;
}


function getRotationMatrix(element) {
    var valuesMatrix = getMatrixValues(element);
    var scale = getScaleMatrix(element);

    if (valuesMatrix.length == 16) {
        for (var i=0; i < 11; i++) {
            valuesMatrix[i] /= scale;
        }
    } else if(valuesMatrix.length == 6) {
        for (var i=0; i < 4; i++) {
            valuesMatrix[i] /= scale;
        }
    }

    var rotationMatrix = valuesMatrix;

    return rotationMatrix;
}


function getTranslationMatrix(element) {
    var valuesMatrix = getMatrixValues(element);

    if (valuesMatrix.length == 16) {
        var translationMatrix = getMatrixValues(element).slice(12, 15);

    } else if (valuesMatrix.length == 6) {
        var translationMatrix = getMatrixValues(element).slice(4);
    }

    return translationMatrix;
}


function getScaleMatrix(element) {
    var valuesMatrix = getMatrixValues(element);
    var temp = 0;

    if (valuesMatrix.length == 16) {
        var scaleMatrix = getMatrixValues(element).slice(0, 4);
        var scale = 0;

        for (var i = 0; i < scaleMatrix.length; i++) {
            scale += parseFloat(scaleMatrix[i]) * parseFloat(scaleMatrix[i]);
        }

        scale = parseFloat(Math.sqrt(scale).toPrecision(4));
    } else if (valuesMatrix.length == 6) {
        temp = valuesMatrix[0]*valuesMatrix[0] + valuesMatrix[1]*valuesMatrix[1];
        var scale = parseFloat(Math.sqrt(temp).toPrecision(4));
    }

    return scale;
}


// console.log("Direct Matrix", getMatrixValues(pluridContainer[0].children[0]));
// console.log("Rotation Matrix", getRotationMatrix(pluridContainer[0].children[0]));
// console.log("Translation Matrix", getTranslationMatrix(pluridContainer[0].children[0]));
// console.log("Scale Matrix", getScaleMatrix(pluridContainer[0].children[0]));


function setTransform(element, rotateXMatrix, rotateYMatrix, translateMatrix, scaleMatrix, xPosPercentarge, yPosPercentarge) {
    var transformMatrix = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["b" /* multiplyArrayOfMatrices */]([
        translateMatrix,
        rotateXMatrix,
        rotateYMatrix,
        scaleMatrix
    ]);
    // console.log("Transform Matrix", transformMatrix);

    // Returns a result like: "matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 50, 100, 0, 1);"
    var matrix3dRule = __WEBPACK_IMPORTED_MODULE_0__matrix_js__["a" /* matrixArrayToCssMatrix */](transformMatrix);
    // console.log("CSS Rule", matrix3dRule);

    xPosPercentarge = (xPosPercentarge*100).toPrecision(6);
    yPosPercentarge = (yPosPercentarge*100).toPrecision(6);

    // Set the transform
    element.style.transform = matrix3dRule;
    // element.style.transformOrigin = xPosPercentarge + "% " + yPosPercentarge + "%";
    // console.log("Percentage", xPosPercentarge, yPosPercentarge);
}


/***/ }),
/* 5 */
/***/ (function(module, exports) {

// Bridges

var pluridBridges = document.getElementsByTagName('a');

// console.log(pluridBridges[0]);

function pluridifyBridges(bridges) {
    for (i = 0; i < bridges.length; i++) {
        bridges[i].addEventListener('click', function(event) {
            event.preventDefault();

            var newDiv = document.createElement("div")

            newDiv.innerHTML = '<div class="plurid-bridge-container">' +
                                    '<div class="plurid-bridge">' +
                                        '<iframe src="' +
                                            this.href +
                                            '"></iframe>' +
                                    '</div>' +
                                '</div>'

            this.parentElement.parentElement.parentElement.appendChild(newDiv);

            // console.log(this.parentElement.parentElement)
        })

    }
}

pluridifyBridges(pluridBridges);


/***/ }),
/* 6 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ })
/******/ ]);