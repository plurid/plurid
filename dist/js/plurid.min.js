/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 7);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getPlurid = getPlurid;
function getPlurid(event) {
    // let pluridToTransformId = getPluridToTransformId(event.path);
    // let pluridToTransformElement = document.querySelector(`#${pluridToTransformId}`);

    var selectedPluridRoot = getSelectedPlurids(event.path).root;
    var selectedPluridSheet = getSelectedPlurids(event.path).sheet;

    return {
        root: selectedPluridRoot,
        sheet: selectedPluridSheet
    };
}

function getSelectedPlurids(path) {
    var selectedPluridRootID = path[0].localName;
    // console.log(path);

    if (selectedPluridRootID === "plurid-roots" || selectedPluridRootID === "plurid-container") {
        selectedPluridRootID = "plurid-roots";
    } else {
        selectedPluridRootID = searchForSelectedIDs(path).root;
    }

    var selectedPluridSheetID = searchForSelectedIDs(path).sheet;

    var selectedPluridRoot = document.querySelector("#" + selectedPluridRootID);
    var selectedPluridSheet = selectedPluridSheetID ? document.querySelector("#" + selectedPluridSheetID) : null;

    return {
        root: selectedPluridRoot,
        sheet: selectedPluridSheet
    };
}

function searchForSelectedIDs(path) {
    var root = "";
    var sheet = "";

    for (var i = 0; i < path.length; i++) {
        if (path[i].localName === "plurid-root") {
            root = path[i].id;
            // return path[i].id;
        }

        if (path[i].localName === "plurid-sheet") {
            sheet = path[i].id;
        }

        if (path[i].localName === "plurid-options") {
            root = "plurid-roots";
        }
    }

    return {
        root: root,
        sheet: sheet
    };
}

var activePlurid = exports.activePlurid = {};

Object.defineProperty(activePlurid, 'selected', {
    value: document.querySelector("plurid-roots"),
    writable: true
});

// console.log("1", activePlurid.selected);

/***/ }),
/* 1 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.renderControls = renderControls;
exports.contentControls = contentControls;
exports.setControls = setControls;

var _getPlurid = __webpack_require__(0);

// console.log(activePlurid);


function renderControls(element, id) {
    var controls = document.createElement("plurid-controls");
    controls.id = "plurid-controls-" + id;
    element.appendChild(controls);
}

function contentControls() {
    var content = "<div class=\"plurid-container-controls-content\">\n                        <div class=\"plurid-controls-button plurid-controls-select\" tabindex=\"1\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 715.45 731.22\"><defs></defs><title>Select</title><g><g id=\"Select\"><path class=\"plurid-controls-buttons-svg\" d=\"M354.25,731.22,340.3,363.64,0,316.45,715.45,0ZM181,291.07l207.7,28.81,8.06,212.42L609.53,101.52Z\"/></g></g></svg>\n                        </div>\n\n                        <div class=\"plurid-controls-button plurid-controls-parent\" tabindex=\"1\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 878.5 880.44\"><defs></defs><title>Parent</title><g><g id=\"Parent\"><path class=\"plurid-controls-buttons-svg\" d=\"M521.28,838.25V386.06L334.86,406.83V250.66L878.5,193.4V787.71Zm44-501.32V787.64l269.31-38.1V242.22l-455.74,48v67.48Z\"/><polygon class=\"plurid-controls-buttons-svg\" points=\"0.44 0.68 0.44 696.24 405.19 879.75 405.19 182.91 0.44 0.68\"/><path class=\"plurid-controls-buttons-svg\" d=\"M405.63,880.44,0,696.52V0L405.63,182.63ZM.88,696,404.75,879.07V183.2L.88,1.36Z\"/></g></g></svg>\n                        </div>\n\n                        <div class=\"plurid-controls-button plurid-controls-minimize\" tabindex=\"1\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 874.5 50\"><defs></defs><title>Minimize</title><g><g id=\"Minimize\"><line class=\"plurid-controls-buttons-svg\" y1=\"25\" x2=\"874.5\" y2=\"25\"/><rect class=\"plurid-controls-buttons-svg\" width=\"874.5\" height=\"50\"/></g></g></svg>\n                        </div>\n\n                        <div class=\"plurid-controls-button plurid-controls-reduce-height\" tabindex=\"1\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 869.91 326\"><defs></defs><title>Reduce</title><g><g id=\"Reduce_Height\" data-name=\"Reduce Height\"><path class=\"plurid-controls-buttons-svg\" d=\"M869.91,326H228.37V43.58H0V0H869.91ZM272,282.42H826.33V43.58H272Z\"/></g></g></svg>\n                        </div>\n\n                        <div class=\"plurid-controls-button plurid-controls-reload\" tabindex=\"1\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 872.67 701\"><defs></defs><title>Reload</title><g><g id=\"Reload\"><polygon class=\"plurid-controls-buttons-svg\" points=\"794 701 0 701 0 0 775 0 775 50 50 50 50 651 744 651 744 239 794 239 794 701\"/><polygon class=\"plurid-controls-buttons-svg\" points=\"707.31 455.04 660.69 436.96 773.57 145.79 872.67 437.97 825.33 454.03 770.43 292.21 707.31 455.04\"/></g></g></svg>\n                        </div>\n\n                        <div class=\"plurid-controls-button plurid-controls-extend\" tabindex=\"1\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 866 375.89\"><defs></defs><title>Extend</title><g><g id=\"Extend\"><rect class=\"plurid-controls-buttons-svg\" x=\"31.02\" y=\"165.42\" width=\"796.17\" height=\"43.32\"/><polygon class=\"plurid-controls-buttons-svg\" points=\"192.59 375.81 0 187 192.67 0 222.84 31.08 62.03 187.16 222.91 344.88 192.59 375.81\"/><polygon class=\"plurid-controls-buttons-svg\" points=\"673.33 375.89 643.16 344.8 803.97 188.73 643.09 31.01 673.41 0.08 866 188.89 673.33 375.89\"/></g></g></svg>\n                        </div>\n\n                        <div class=\"plurid-controls-button plurid-controls-close\" tabindex=\"1\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 875.09 875.82\"><defs></defs><title>Close</title><g><g id=\"Close\"><rect class=\"plurid-controls-buttons-svg\" x=\"415.36\" y=\"-158.88\" width=\"44.45\" height=\"1193.58\" transform=\"translate(-181.48 437.37) rotate(-44.97)\"/><rect class=\"plurid-controls-buttons-svg\" x=\"-160.45\" y=\"415.69\" width=\"1187.63\" height=\"44.45\" transform=\"translate(-182.73 438.11) rotate(-45.32)\"/></g></g></svg>\n                        </div>\n\n                        <div class=\"plurid-controls-button plurid-controls-isolate\" tabindex=\"1\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 562 869.97\"><defs></defs><title>Isolate</title><g><g id=\"Isolate\"><path class=\"plurid-controls-buttons-svg\" d=\"M562,870H0V0H562ZM43.5,826.47h475V43.5H43.5Z\"/><rect class=\"plurid-controls-buttons-svg\" x=\"259.25\" y=\"166.16\" width=\"43.5\" height=\"537.64\"/></g></g></svg>\n                        </div>\n\n                        <div class=\"plurid-controls-button plurid-controls-back\" tabindex=\"1\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 874.8 394.66\"><defs></defs><title>Back</title><g><g id=\"Back\"><rect class=\"plurid-controls-buttons-svg\" x=\"46.8\" y=\"173.72\" width=\"828\" height=\"45.49\"/><polygon class=\"plurid-controls-buttons-svg\" points=\"202.25 394.66 0 196.38 202.33 0 234.01 32.64 65.15 196.54 234.1 362.18 202.25 394.66\"/></g></g></svg>\n                        </div>\n\n                        <div class=\"plurid-controls-button plurid-controls-forward\" tabindex=\"1\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 871.97 361.91\"><defs></defs><title>Forward</title><g><g id=\"Next\"><rect class=\"plurid-controls-buttons-svg\" y=\"159.23\" width=\"842.93\" height=\"41.72\"/><polygon class=\"plurid-controls-buttons-svg\" points=\"686.43 361.91 657.38 331.98 812.23 181.68 657.3 29.79 686.5 0 871.97 181.83 686.43 361.91\"/></g></g></svg>\n                        </div>\n\n                        <div class=\"plurid-controls-url\">\n                            <div class=\"plurid-controls-url-container\">\n                                <div class=\"plurid-controls-button plurid-controls-button-url plurid-controls-search\" tabindex=\"1\">\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 748.89 755.57\"><defs></defs><title>Search</title><g><g id=\"Search\"><line class=\"plurid-controls-buttons-svg\" x1=\"17.83\" y1=\"738.05\" x2=\"359.83\" y2=\"390.05\"/><rect class=\"plurid-controls-buttons-svg\" x=\"-55.13\" y=\"539.05\" width=\"487.92\" height=\"50\" transform=\"translate(-345.89 303.51) rotate(-45.51)\"/><path class=\"plurid-controls-buttons-svg\" d=\"M496.33,50A41.62,41.62,0,0,1,526,62.27L686.62,222.92a42,42,0,0,1,0,59.26L526,442.83a41.87,41.87,0,0,1-59.25,0L306.05,282.18a42,42,0,0,1,0-59.26L466.71,62.27A41.62,41.62,0,0,1,496.33,50m0-50a91.61,91.61,0,0,0-65,26.92L270.7,187.57a91.9,91.9,0,0,0,0,130L431.35,478.19a91.9,91.9,0,0,0,130,0L722,317.54a91.9,91.9,0,0,0,0-130L561.32,26.92A91.62,91.62,0,0,0,496.33,0Z\"/></g></g></svg>\n                                </div>\n                                <input class=\"plurid-controls-url-input\" type=\"text\" tabindex=\"1\" placeholder=\"Search\">\n                                <div class=\"plurid-controls-button plurid-controls-button-url plurid-controls-cancel\" tabindex=\"1\">\n                                    <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 875.09 875.82\"><defs></defs><title>Close</title><g><g id=\"Close\"><rect class=\"plurid-controls-buttons-svg\" x=\"415.36\" y=\"-158.88\" width=\"44.45\" height=\"1193.58\" transform=\"translate(-181.48 437.37) rotate(-44.97)\"/><rect class=\"plurid-controls-buttons-svg\" x=\"-160.45\" y=\"415.69\" width=\"1187.63\" height=\"44.45\" transform=\"translate(-182.73 438.11) rotate(-45.32)\"/></g></g></svg>\n                                </div>\n                            </div>\n                        </div>\n\n                        <div class=\"plurid-controls-button plurid-controls-extract\" tabindex=\"1\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 697.49 878\"><defs></defs><title>Extract</title><g><g id=\"Extract_Root\" data-name=\"Extract Root\"><path class=\"plurid-controls-buttons-svg\" d=\"M503,878H0V148.09H503ZM43.81,834.19H459.15V191.9H43.81Z\"/><polygon class=\"plurid-controls-buttons-svg\" points=\"697.49 782.49 487.19 782.49 487.19 738.68 653.68 738.68 653.68 43.81 223.41 43.81 223.26 161.26 179.45 161.2 179.66 0 697.49 0 697.49 782.49\"/></g></g></svg>\n                        </div>\n\n                        <div class=\"plurid-controls-button plurid-controls-opacity\" tabindex=\"1\">\n                            100\n                        </div>\n\n                        <div class=\"plurid-controls-button plurid-controls-more\" tabindex=\"1\">\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 622.51 130.1\"><defs></defs><title>More</title><g id=\"Layer_2\" data-name=\"Layer 2\"><g id=\"More\"><rect class=\"plurid-controls-buttons-svg\" x=\"20.2\" y=\"20.2\" width=\"89.69\" height=\"89.69\"/><path class=\"plurid-controls-buttons-svg\" d=\"M130.1,130.1H0V0H130.1ZM40.4,89.69H89.69V40.4H40.4Z\"/><rect class=\"plurid-controls-buttons-svg\" x=\"266.21\" y=\"20.2\" width=\"89.69\" height=\"89.69\"/><path class=\"plurid-controls-buttons-svg\" d=\"M376.11,130.1H246V0h130.1Zm-89.7-40.41H335.7V40.4H286.41Z\"/><rect class=\"plurid-controls-buttons-svg\" x=\"512.62\" y=\"20.2\" width=\"89.69\" height=\"89.69\"/><path class=\"plurid-controls-buttons-svg\" d=\"M622.51,130.1H492.42V0H622.51ZM532.82,89.69h49.29V40.4H532.82Z\"/></g></g></svg>\n                        </div>\n                    </div>\n\n                    <div class=\"plurid-controls-open-close\">\n                        <div class=\"plurid-controls-open-close-character\">\n                            <!-- White up-pointing triangle: &#9651; White down-pointing triangle: &#9661; -->\n                            &#9651;\n                        </div>\n                    </div>\n                    ";

    return content;
}

function setControls(element) {
    setActivePlurid(element);

    openCloseControls(element);

    closePlurid(element);
}

function openCloseControls(element) {

    var pluridControlsContent = element.getElementsByClassName("plurid-container-controls-content")[0];

    var pluridControlsOpenClose = element.getElementsByClassName("plurid-controls-open-close")[0];
    var pluridControlsOpenCloseCharacter = element.getElementsByClassName("plurid-controls-open-close-character")[0];
    var pluridControlsOpenCloseState = 1;

    pluridControlsOpenClose.addEventListener("click", function (event) {
        var parentPlurid = element.parentElement;

        if (pluridControlsOpenCloseState == 1) {
            parentPlurid.style.paddingTop = "50px";
            pluridControlsContent.style.display = "none";
            element.style.height = "15px";
            pluridControlsOpenCloseCharacter.innerHTML = "&#9661;";
        }

        if (pluridControlsOpenCloseState == 0) {
            parentPlurid.style.paddingTop = "100px";
            pluridControlsContent.style.display = "inline-flex";
            element.style.height = "60px";
            pluridControlsOpenCloseCharacter.innerHTML = "&#9651;";
        }

        pluridControlsOpenCloseState = pluridControlsOpenCloseState ? 0 : 1;
    });
}

function closePlurid(element) {
    var pluridParentClose = element.getElementsByClassName("plurid-controls-close")[0];

    pluridParentClose.addEventListener("click", function (event) {
        var pluridParent = pluridParentClose.parentElement.parentElement.parentElement;
        // console.log(pluridParent.parentElement.nodeName)
        if (pluridParent.parentElement.nodeName == "PLURID-ROOT") {
            // pluridParent.parentElement.style.display = "none";
            pluridParent.parentElement.parentElement.removeChild(pluridParent.parentElement);
        }

        if (pluridParent.parentElement.nodeName == "PLURID-SCION") {
            // pluridParent.parentElement.parentElement.style.display = "none";
            pluridParent.parentElement.parentElement.parentElement.removeChild(pluridParent.parentElement.parentElement);
        }

        _getPlurid.activePlurid.selected = document.querySelector("plurid-roots");
    });
}

function setActivePlurid(element) {
    var pluridSelect = element.getElementsByClassName("plurid-controls-select")[0];
    // console.log(pluridSelect);

    pluridSelect.addEventListener("click", function (event) {
        // console.log(pluridSelect.parentElement.parentElement.parentElement);
        _getPlurid.activePlurid.selected = pluridSelect.parentElement.parentElement.parentElement;
        // console.log(activePlurid);
    });

    pluridSelect.addEventListener("dblclick", function (event) {
        // console.log(pluridSelect.parentElement.parentElement.parentElement);
        _getPlurid.activePlurid.selected = pluridSelect.parentElement.parentElement.parentElement;
        var activeRoot = document.getElementById(_getPlurid.activePlurid.selected.id).parentElement;
        var activeRoots = document.getElementById(_getPlurid.activePlurid.selected.id).parentElement.parentElement;
        // console.log(active);
        activeRoot.style.transform = "translateX(0px) translateY(0px) translateZ(0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg) scale(1)";
        activeRoots.style.transform = "translateX(0px) translateY(0px) translateZ(0px) rotateX(0deg) rotateY(0deg) rotateZ(0deg) scale(1)";
    });
}

// console.log("HERE", activePlurid.selected);

/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rotatePlurid = rotatePlurid;
exports.translatePlurid = translatePlurid;
exports.scalePlurid = scalePlurid;

var _getPlurid = __webpack_require__(0);

var _directions = __webpack_require__(3);

var _transformsCore = __webpack_require__(4);

var transcore = _interopRequireWildcard(_transformsCore);

var _matrix = __webpack_require__(5);

var matrix = _interopRequireWildcard(_matrix);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function rotatePlurid(event, plurid) {
    var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    // console.log("ROTATE");
    // console.log("Event", event);
    // console.log("----------------------------------")

    // let plurid = getPlurid(event);
    // console.log("Plurid", plurid);

    if (direction == null) {
        direction = (0, _directions.getDirection)(event);
    }
    // console.log("Direction", direction);


    var rotateX = transcore.getTransformRotate(plurid).rotateX;
    var rotateY = transcore.getTransformRotate(plurid).rotateY;
    var translateX = transcore.getTransformTranslate(plurid).translateX;
    var translateY = transcore.getTransformTranslate(plurid).translateY;
    var translateZ = 0;
    var scale = transcore.getTransformScale(plurid).scale;

    var valrotationXMatrix = matrix.rotateXMatrix(-1 * rotateX);
    var valrotationYMatrix = matrix.rotateYMatrix(-1 * rotateY);
    var valtranslationMatrix = matrix.translateMatrix(translateX, translateY, 0);
    var valscaleMatrix = matrix.scaleMatrix(scale);

    var yPos = transcore.getyPos(event, plurid);

    if (scale < 0.5) {
        var angleIncrement = 0.12;
    } else {
        var angleIncrement = 0.12;
    }

    // console.log("----------------------------------")
    // console.log("Rotate X", rotateX);
    // console.log("Rotate X in Degrees", rotateX*180/Math.PI);
    // console.log("Rotate Y",rotateY);
    // console.log("Rotate Y in Degrees",rotateY*180/Math.PI);
    // console.log("Translate X", translateX);
    // console.log("Translate Y", translateY);
    // console.log("Scale", scale);

    plurid.style.transition = "0ms ease-in-out";

    if (direction === "left") {
        rotateY -= angleIncrement;
        valrotationYMatrix = matrix.rotateYMatrix(-1 * rotateY);

        // console.log("valrotationXMatrix", valrotationXMatrix);
        // console.log("valrotationYMatrix", valrotationYMatrix);
        // console.log("valtranslationMatrix", valtranslationMatrix);
        // console.log("valscaleMatrix", valscaleMatrix);

        transcore.setTransform(plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, yPos);
    }

    if (direction === "right") {
        rotateY += angleIncrement;
        valrotationYMatrix = matrix.rotateYMatrix(-1 * rotateY);

        transcore.setTransform(plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, yPos);
    }

    // if (direction === "up") {
    //     rotateX += angleIncrement;
    //     valrotationXMatrix = matrix.rotateXMatrix(-1 * rotateX);

    //     transcore.setTransform(plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, yPos);
    // }

    // if (direction === "down") {
    //     rotateX -= angleIncrement;

    //     valrotationXMatrix = matrix.rotateXMatrix(-1 * rotateX);

    //     transcore.setTransform(plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, yPos);
    // }
}

function translatePlurid(event, plurid) {
    var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    // console.log("TRANSLATE");
    // console.log("Event", event);

    // let plurid = getPlurid(event);
    // console.log("Plurid", plurid);

    if (direction == null) {
        direction = (0, _directions.getDirection)(event);
    }
    // console.log("Direction", direction);


    var rotateX = transcore.getTransformRotate(plurid).rotateX;
    var rotateY = transcore.getTransformRotate(plurid).rotateY;
    var translateX = transcore.getTransformTranslate(plurid).translateX;
    var translateY = transcore.getTransformTranslate(plurid).translateY;
    var translateZ = 0;
    var scale = transcore.getTransformScale(plurid).scale;

    var valrotationXMatrix = matrix.rotateXMatrix(-1 * rotateX);
    var valrotationYMatrix = matrix.rotateYMatrix(-1 * rotateY);
    var valtranslationMatrix = matrix.translateMatrix(translateX, translateY, 0);
    var valscaleMatrix = matrix.scaleMatrix(scale);

    var yPos = transcore.getyPos(event, plurid);

    if (scale < 0.5) {
        var linearIncrement = 50;
    } else {
        var linearIncrement = 30;
    }

    // console.log("----------------------------------")
    // console.log("Rotate X", rotateX);
    // console.log("Rotate Y",rotateY);
    // console.log("Translate X", translateX);
    // console.log("Translate Y", translateY);
    // console.log("Scale", scale);
    // console.log("getRotateXMatrix", getRotateXMatrix);
    // console.log("getRotateYMatrix", getRotateYMatrix);
    // console.log("getTranslateMatrix", getTranslateMatrix);
    // console.log("getScaleMatrix", getScaleMatrix);

    plurid.style.transition = "20ms ease-in-out";

    if (direction === "left") {
        translateX -= linearIncrement;
        var valtranslationMatrix = matrix.translateMatrix(translateX, translateY, translateZ);

        transcore.setTransform(plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, yPos);
    }

    if (direction === "right") {
        translateX += linearIncrement;
        var valtranslationMatrix = matrix.translateMatrix(translateX, translateY, translateZ);

        transcore.setTransform(plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, yPos);
    }

    if (direction === "up") {
        translateY -= linearIncrement;
        var valtranslationMatrix = matrix.translateMatrix(translateX, translateY, translateZ);

        transcore.setTransform(plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, yPos);
    }

    if (direction === "down") {
        translateY += linearIncrement;
        var valtranslationMatrix = matrix.translateMatrix(translateX, translateY, translateZ);

        transcore.setTransform(plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, yPos);
    }
}

function scalePlurid(event, plurid) {
    var direction = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

    // console.log("SCALE");
    // console.log("Event", event);

    // let plurid = getPlurid(event);
    // console.log("Plurid", plurid);

    if (direction == null) {
        direction = (0, _directions.getDirection)(event);
    }
    // console.log("Direction", direction);

    var rotateX = transcore.getTransformRotate(plurid).rotateX;
    var rotateY = transcore.getTransformRotate(plurid).rotateY;
    var translateX = transcore.getTransformTranslate(plurid).translateX;
    var translateY = transcore.getTransformTranslate(plurid).translateY;
    var translateZ = 0;
    var scale = transcore.getTransformScale(plurid).scale;

    var valrotationXMatrix = matrix.rotateXMatrix(-1 * rotateX);
    var valrotationYMatrix = matrix.rotateYMatrix(-1 * rotateY);
    var valtranslationMatrix = matrix.translateMatrix(translateX, translateY, 0);
    var valscaleMatrix = matrix.scaleMatrix(scale);

    var yPos = transcore.getyPos(event, plurid);

    var scaleIncrement = 0.05;

    // console.log("----------------------------------")
    // console.log("Rotate X", rotateX);
    // console.log("Rotate Y",rotateY);
    // console.log("Translate X", translateX);
    // console.log("Translate Y", translateY);
    // console.log("Scale", scale);
    // console.log("getRotateXMatrix", getRotateXMatrix);
    // console.log("getRotateYMatrix", getRotateYMatrix);
    // console.log("getTranslateMatrix", getTranslateMatrix);
    // console.log("getScaleMatrix", getScaleMatrix);

    plurid.style.transition = "20ms ease-in-out";

    if (direction === "up" || direction === "upright" || direction === "upleft") {
        scale += scaleIncrement;

        if (scale > 4) {
            scale = 4;
        }

        var valscaleMatrix = matrix.scaleMatrix(scale);

        transcore.setTransform(plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, yPos);
    }

    if (direction === "down" || direction === "downleft" || direction === "downright") {
        scale -= scaleIncrement;

        if (scale < 0.1) {
            scale = 0.1;
        }

        var valscaleMatrix = matrix.scaleMatrix(scale);

        transcore.setTransform(plurid, valrotationXMatrix, valrotationYMatrix, valtranslationMatrix, valscaleMatrix, yPos);
    }
}

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getDirection = getDirection;
var direction = "";
var threshold = 0;
var absThreshold = 10;

function getDirection(event) {
    var wheelDeltaX = event.wheelDeltaX;
    var wheelDeltaY = event.wheelDeltaY;
    // console.log(wheelDeltaX);
    // console.log(wheelDeltaY);
    var absWheelDeltaX = Math.abs(wheelDeltaX);
    var absWheelDeltaY = Math.abs(wheelDeltaY);

    if (wheelDeltaX > threshold && absWheelDeltaY < absThreshold && absWheelDeltaX > absWheelDeltaY) {
        direction = "left";
    }

    if (wheelDeltaX < threshold && absWheelDeltaY < absThreshold && absWheelDeltaX > absWheelDeltaY) {
        direction = "right";
    }

    if (wheelDeltaY > threshold && absWheelDeltaX < absThreshold && absWheelDeltaY > absWheelDeltaX) {
        direction = "up";
    }

    if (wheelDeltaY < threshold && absWheelDeltaX < absThreshold && absWheelDeltaY > absWheelDeltaX) {
        direction = "down";
    }

    // if (positionX < threshold && positionY < threshold) {
    //     direction = "upleft";
    // }

    // if (positionX < threshold && positionY > threshold ) {
    //     direction = "downleft";
    // }

    // if (positionX > threshold && positionY > threshold ) {
    //     direction = "downright";
    // }

    // if (positionX > threshold && positionY < threshold ) {
    //     direction = "upright";
    // }

    // console.log('----- direction: ', direction);
    // console.log('movementX: ', event.movementX);
    // console.log('movementY: ', event.movementY);
    return direction;
}

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getTransformRotate = getTransformRotate;
exports.getTransformTranslate = getTransformTranslate;
exports.getTransformScale = getTransformScale;
exports.getMatrixValues = getMatrixValues;
exports.getRotationMatrix = getRotationMatrix;
exports.getTranslationMatrix = getTranslationMatrix;
exports.getScaleMatrix = getScaleMatrix;
exports.setTransform = setTransform;
exports.setCursor = setCursor;
exports.getyPos = getyPos;

var _matrix = __webpack_require__(5);

var matrix = _interopRequireWildcard(_matrix);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function getTransformRotate(element) {
    var values = getRotationMatrix(element);
    // console.log("values Matrix", values);

    var rotateX, rotateY;

    var pi = Math.PI;

    if (values.length == 6) {
        var cosa = parseFloat(values[0]);
        var sina = parseFloat(values[1]);
        // console.log("cos A", cosa);
        // console.log("sin A", sina);

        if (cosa == 1 && sina == 0) {
            rotateX = Math.asin(sina);
            rotateY = Math.acos(cosa);
        }
    }

    if (values.length == 16) {
        var cosaX1 = parseFloat(values[5]);
        var sinaX2 = parseFloat(values[6]);
        var sinaX3 = parseFloat(values[9]);
        var cosaX4 = parseFloat(values[10]);
        // console.log("----------------------")
        // console.log("cos A X 1", cosaX1);
        // console.log("cos A X 1", cosaX1 > 0 ? "POSITIVE" : "NEGATIVE");
        // console.log("arccos A X 1", Math.acos(cosaX1)*180/pi);
        // console.log("sin A X 2", sinaX2);
        // console.log("sin A X 2", sinaX2 > 0 ? "POSITIVE" : "NEGATIVE");
        // console.log("arcsin A X 2", Math.asin(sinaX2)*180/pi);
        // console.log("sin A X 3", sinaX3);
        // console.log("sin A X 3", sinaX3 > 0 ? "POSITIVE" : "NEGATIVE");
        // console.log("arcsin A X 3", Math.asin(sinaX3)*180/pi);
        // console.log("cos A X 4", cosaX4);
        // console.log("cos A X 4", cosaX4 > 0 ? "POSITIVE" : "NEGATIVE");
        // console.log("arccos A X 4", Math.acos(cosaX4)*180/pi);


        // rotateX = 0;

        // 0-180
        if (sinaX3 <= 0) {
            rotateX = Math.acos(cosaX1);
            // console.log("ONE X");
            // console.log("++++++");
        }

        // // 181-360
        if (sinaX3 > 0) {
            rotateX = 2 * pi - Math.acos(cosaX1);
            // console.log("TWO X");
            // console.log("++++++");
        }

        // console.log("rotateX in Radians", rotateX);
        // console.log("rotateX in Degrees", rotateX*180/pi);

        // console.log("-------------")


        // var cosaY = parseFloat(values[0]);
        // var sinaY = parseFloat(values[2]);
        // console.log("cos A Y", cosaY);
        // console.log("sin A Y", sinaY);

        var cosaY1 = parseFloat(values[0]);
        var sinaY2 = parseFloat(values[2]);
        var sinaY3 = parseFloat(values[8]);
        var cosaY4 = parseFloat(values[10]);
        // console.log("cos A Y 1", cosaY1);
        // console.log("cos A Y 1", cosaY1 > 0 ? "POSITIVE" : "NEGATIVE");
        // console.log("arccos A Y 1", Math.acos(cosaY1));
        // console.log("arccos A Y 1 in degs", Math.acos(cosaY1)*180/pi);
        // console.log("sin A Y 2", sinaY2);
        // console.log("sin A Y 2", sinaY2 > 0 ? "POSITIVE" : "NEGATIVE");
        // console.log("arcsin A Y 2", Math.asin(sinaY2)*180/pi);
        // console.log("sin A Y 3", sinaY3);
        // console.log("sin A Y 3", sinaY3 > 0 ? "POSITIVE" : "NEGATIVE");
        // console.log("arcsin A Y 3", Math.asin(sinaY3)*180/pi);
        // console.log("cos A Y 4", cosaY4);
        // console.log("cos A Y 4", cosaY4 > 0 ? "POSITIVE" : "NEGATIVE");
        // console.log("arccos A Y 4", Math.acos(cosaY4)*180/pi);

        // rotateY = 0

        if (sinaY2 <= 0) {
            rotateY = Math.acos(cosaY1);
            // console.log("ONE Y");
            // console.log("++++++");
        }

        if (sinaY2 > 0) {
            rotateY = 2 * pi - Math.acos(cosaY1);
            // console.log("TWO Y");
            // console.log("++++++");
        }
    }

    return {
        rotateX: rotateX,
        rotateY: rotateY
    };
}

function getTransformTranslate(element) {
    var values = getTranslationMatrix(element);

    var translateX, translateY;

    translateX = parseFloat(values[0]);
    translateY = parseFloat(values[1]);

    return {
        translateX: translateX,
        translateY: translateY
    };
}

function getTransformScale(element) {
    var scale = getScaleMatrix(element);
    // console.log(scale);

    return {
        scale: scale
    };
}

function getMatrixValues(element) {
    var transformValues = window.getComputedStyle(element, null).getPropertyValue("transform");
    // console.log("transformValues Matrix", transformValues);

    var matrixValues = transformValues.split('(')[1].split(')')[0].split(',');
    // console.log("matrixValues Matrix", matrixValues);

    for (var i = 0; i < matrixValues.length; i++) {
        matrixValues[i] = parseFloat(matrixValues[i]);
    }

    return matrixValues;
}

function getRotationMatrix(element) {
    var valuesMatrix = getMatrixValues(element);
    // console.log("getMatrixValues Matrix", valuesMatrix);

    var scale = getScaleMatrix(element);
    // console.log("getScaleMatrix Matrix", scale);

    if (valuesMatrix.length == 16) {
        for (var i = 0; i < 11; i++) {
            valuesMatrix[i] /= scale;
        }
    } else if (valuesMatrix.length == 6) {
        for (var i = 0; i < 4; i++) {
            valuesMatrix[i] /= scale;
        }
    }

    var rotationMatrix = valuesMatrix;
    // console.log("rotationMatrix Matrix", rotationMatrix);


    return rotationMatrix;
}

function getTranslationMatrix(element) {
    var valuesMatrix = getMatrixValues(element);

    if (valuesMatrix.length == 16) {
        var translationMatrix = getMatrixValues(element).slice(12, 15);
    } else if (valuesMatrix.length == 6) {
        var translationMatrix = getMatrixValues(element).slice(4);
    }

    return translationMatrix;
}

function getScaleMatrix(element) {
    var valuesMatrix = getMatrixValues(element);
    var temp = 0;

    if (valuesMatrix.length == 16) {
        var scaleMatrix = getMatrixValues(element).slice(0, 4);
        var scale = 0;

        for (var i = 0; i < scaleMatrix.length; i++) {
            scale += parseFloat(scaleMatrix[i]) * parseFloat(scaleMatrix[i]);
        }

        scale = parseFloat(Math.sqrt(scale).toPrecision(4));
    } else if (valuesMatrix.length == 6) {
        temp = valuesMatrix[0] * valuesMatrix[0] + valuesMatrix[1] * valuesMatrix[1];
        var scale = parseFloat(Math.sqrt(temp).toPrecision(4));
    }

    return scale;
}

function setTransform(element, rotateXMatrix, rotateYMatrix, translateMatrix, scaleMatrix) {
    var yPos = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : 0;

    var transformMatrix = matrix.multiplyArrayOfMatrices([translateMatrix, rotateYMatrix, rotateXMatrix, scaleMatrix]);
    // console.log("Transform Matrix", transformMatrix);

    // Set the transform
    var transformOriginRule = "50% " + yPos + "px";
    element.style.transformOrigin = transformOriginRule;

    // Returns a a matrix3d() CSS string
    var matrix3dRule = matrix.matrixArrayToCssMatrix(transformMatrix);
    // console.log("CSS Rule", matrix3dRule);
    element.style.transform = matrix3dRule;
}

function setCursor(mode) {
    switch (mode) {
        case "rotate":
            document.body.style.cursor = "ew-resize";
            break;
        case "translate":
            document.body.style.cursor = "move";
            break;
        case "scale":
            document.body.style.cursor = "nesw-resize";
            break;
        default:
            document.body.style.cursor = "default";
    }
}

function getyPos(event, plurid) {
    var yCenter = window.innerHeight / 2;
    var translateY = getTransformTranslate(plurid).translateY;

    var yPos = translateY * -1 + yCenter;

    return yPos;
}

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.rotateXMatrix = rotateXMatrix;
exports.rotateYMatrix = rotateYMatrix;
exports.rotateZMatrix = rotateZMatrix;
exports.translateMatrix = translateMatrix;
exports.scaleMatrix = scaleMatrix;
exports.multiplyMatrices = multiplyMatrices;
exports.multiplyArrayOfMatrices = multiplyArrayOfMatrices;
exports.matrixArrayToCssMatrix = matrixArrayToCssMatrix;
// Matrix Operations for Single Value (De-)Composition
// Sourced from https://github.com/gregtatum/mdn-webgl/blob/master/library/matrices.js
function rotateXMatrix(a) {
    var cos = Math.cos;
    var sin = Math.sin;

    return [1, 0, 0, 0, 0, cos(a), -sin(a), 0, 0, sin(a), cos(a), 0, 0, 0, 0, 1];
}

function rotateYMatrix(a) {
    var cos = Math.cos;
    var sin = Math.sin;

    return [cos(a), 0, sin(a), 0, 0, 1, 0, 0, -sin(a), 0, cos(a), 0, 0, 0, 0, 1];
}

function rotateZMatrix(a) {
    var cos = Math.cos;
    var sin = Math.sin;

    return [cos(a), -sin(a), 0, 0, sin(a), cos(a), 0, 0, 0, 0, 1, 0, 0, 0, 0, 1];
}

function translateMatrix(x, y, z) {
    return [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, x, y, z, 1];
}

function scaleMatrix(s) {
    return [s, 0, 0, 0, 0, s, 0, 0, 0, 0, s, 0, 0, 0, 0, 1];
}

function multiplyMatrices(a, b) {
    // https://github.com/toji/gl-matrix/blob/master/src/gl-matrix/mat4.js#L306-L337

    var result = [];

    var a00 = a[0],
        a01 = a[1],
        a02 = a[2],
        a03 = a[3],
        a10 = a[4],
        a11 = a[5],
        a12 = a[6],
        a13 = a[7],
        a20 = a[8],
        a21 = a[9],
        a22 = a[10],
        a23 = a[11],
        a30 = a[12],
        a31 = a[13],
        a32 = a[14],
        a33 = a[15];

    // Cache only the current line of the second matrix
    var b0 = b[0],
        b1 = b[1],
        b2 = b[2],
        b3 = b[3];
    result[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    result[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    result[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    result[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[4];b1 = b[5];b2 = b[6];b3 = b[7];
    result[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    result[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    result[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    result[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[8];b1 = b[9];b2 = b[10];b3 = b[11];
    result[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    result[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    result[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    result[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    b0 = b[12];b1 = b[13];b2 = b[14];b3 = b[15];
    result[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
    result[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
    result[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
    result[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;

    return result;
}

function multiplyArrayOfMatrices(matrices) {
    var inputMatrix = matrices[0];

    for (var i = 1; i < matrices.length; i++) {
        inputMatrix = multiplyMatrices(inputMatrix, matrices[i]);
    }

    return inputMatrix;
}

// Create the matrix3d style property from a matrix array
function matrixArrayToCssMatrix(array) {
    return 'matrix3d(' + array.join(',') + ')';
}

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.renderOptions = renderOptions;
exports.displayOptions = displayOptions;
exports.contentOptions = contentOptions;
function renderOptions(element) {
    var options = document.createElement("plurid-options");
    element.appendChild(options);
}

function displayOptions(element) {
    element.addEventListener("mousemove", function (event) {
        var cursorYLocation = event.pageY;
        var containerHeight = element.clientHeight;
        var optionsDisplayLimitOn = 80;
        var optionsDisplayLimitOff = 100;
        var optionsTag = document.getElementsByTagName("plurid-options");

        if (cursorYLocation > containerHeight - optionsDisplayLimitOn) {
            var _iteratorNormalCompletion = true;
            var _didIteratorError = false;
            var _iteratorError = undefined;

            try {
                for (var _iterator = optionsTag[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
                    var optionsElement = _step.value;

                    optionsElement.style.display = "block";
                }
            } catch (err) {
                _didIteratorError = true;
                _iteratorError = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion && _iterator.return) {
                        _iterator.return();
                    }
                } finally {
                    if (_didIteratorError) {
                        throw _iteratorError;
                    }
                }
            }
        }

        if (cursorYLocation < containerHeight - optionsDisplayLimitOff) {
            var _iteratorNormalCompletion2 = true;
            var _didIteratorError2 = false;
            var _iteratorError2 = undefined;

            try {
                for (var _iterator2 = optionsTag[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
                    var _optionsElement = _step2.value;

                    _optionsElement.style.display = "none";
                }
            } catch (err) {
                _didIteratorError2 = true;
                _iteratorError2 = err;
            } finally {
                try {
                    if (!_iteratorNormalCompletion2 && _iterator2.return) {
                        _iterator2.return();
                    }
                } finally {
                    if (_didIteratorError2) {
                        throw _iteratorError2;
                    }
                }
            }
        }
    });
}

function contentOptions() {
    var content = "<div class=\"plurid-container-options-content\">\n                    <div class=\"plurid-container-options-group\">\n                        <span class=\"plurid-container-button plurid-container-rotate-left\">&#x25c0;</span>\n                        <span class=\"plurid-container-button plurid-container-rotate-up\">&#x25B2;</span>\n                        <p>Rotation</p>\n                        <span class=\"plurid-container-button plurid-container-rotate-down\">&#x25BC;</span>\n                        <span class=\"plurid-container-button plurid-container-rotate-right\">&#x25b6;</span>\n                    </div>\n\n                    <div class=\"plurid-container-options-group\">\n                        <span class=\"plurid-container-button plurid-container-translate-left\">&#x25c0;</span>\n                        <span class=\"plurid-container-button plurid-container-translate-up\">&#x25B2;</span>\n                        <p>Translation</p>\n                        <span class=\"plurid-container-button plurid-container-translate-down\">&#x25BC;</span>\n                        <span class=\"plurid-container-button plurid-container-translate-right\">&#x25b6;</span>\n                    </div>\n\n                    <div class=\"plurid-container-options-group\">\n                        <span class=\"plurid-container-button plurid-container-scale-up\">&#x25B2;</span>\n                        <p>Scale</p>\n                        <span class=\"plurid-container-button plurid-container-scale-down\">&#x25BC;</span>\n                    </div>\n\n                    <div class=\"plurid-container-options-group\">\n                        <p class=\"plurid-container-link-expand plurid-container-more-button\">More...</p>\n                    </div>\n\n                    <div class=\"plurid-container-options-more\">\n                        <div class=\"plurid-container-options-group\">\n                            <p>Background</p>\n                            <span class=\"plurid-container-button plurid-container-color\"></span>\n                        </div>\n                        <div class=\"plurid-container-options-group\">\n                            <p>Use Scroll to Translate</p>\n                            <input type=\"checkbox\" class=\"plurid-container-use-scroll\">\n                        </div>\n                        <div class=\"plurid-container-options-group\">\n                            <p class=\"plurid-container-link-expand plurid-container-shortcuts-button\">Shortcuts</p>\n                        </div>\n                    </div>\n\n                    <div class=\"plurid-container-options-shortcuts\">\n                        <div class=\"plurid-container-options-group\">\n                            <p>Hold Button and Move Pointer:</p>\n                        </div>\n                        <div class=\"plurid-container-options-group\">\n                            <p>Shift for Rotation</p>\n                        </div>\n                        <div class=\"plurid-container-options-group\">\n                            <p>Alt/Option for Translation</p>\n                        </div>\n                        <div class=\"plurid-container-options-group\">\n                            <p>Control/Command for Scale</p>\n                        </div>\n                    </div>\n                </div>";

    return content;
}

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


// require JS files
// require('./source/legacy/plurid');
// require('./source/legacy/container-options');


__webpack_require__(8);

// require Elements
__webpack_require__(10);
__webpack_require__(11);
__webpack_require__(17);
__webpack_require__(18);
__webpack_require__(19);
__webpack_require__(21);
__webpack_require__(22);

// require Logic
__webpack_require__(3);

__webpack_require__(24);

// require Sass main file
__webpack_require__(25);

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(global) {

// set pluridScene as global variable

(function (global) {
    global.pluridScene = {
        metadata: {
            pages: 0
        },
        content: {}
    };
}).call(undefined, global);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(9)))

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var g;

// This works in non-strict mode
g = function () {
	return this;
}();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1, eval)("this");
} catch (e) {
	// This works if the window reference is available
	if ((typeof window === "undefined" ? "undefined" : _typeof(window)) === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;

/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var pluridBranch = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {}
    }
});

document.registerElement("plurid-branch", {
    prototype: pluridBranch
});

var pluridInsertion = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {
            // console.log("pluridInsertion works");
        }
    }
});

document.registerElement("plurid-insertion", {
    prototype: pluridInsertion
});

var pluridBridge = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {
            // console.log("pluridBridge works");
        }
    }
});

document.registerElement("plurid-bridge", {
    prototype: pluridBridge
});

var pluridScion = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {
            // console.log("pluridScion works");
        }
    }
});

document.registerElement("plurid-scion", {
    prototype: pluridScion
});

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _containerCore = __webpack_require__(12);

var _options = __webpack_require__(14);

var _shortcuts = __webpack_require__(15);

var _branchCore = __webpack_require__(16);

var _optionsCore = __webpack_require__(6);

var pluridContainer = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {
            (0, _containerCore.transform)(this);

            (0, _options.initOptions)();
            (0, _optionsCore.renderOptions)(this);
            (0, _optionsCore.displayOptions)(this);

            (0, _shortcuts.initShortcuts)(this);

            (0, _branchCore.renderBranch)();
        }
    }
});

document.registerElement("plurid-container", {
    prototype: pluridContainer
});

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.transform = transform;

var _getPlurid = __webpack_require__(0);

var _stylePlurid = __webpack_require__(13);

var _transforms = __webpack_require__(2);

// transform receives the selected plurid
function transform(element) {
    var pluridStack = new Set();
    var plurid = document.querySelector("plurid-roots");

    // element.addEventListener("click", event => {
    //     let pluridRoot = getPlurid(event).root;
    //     let pluridSheet = getPlurid(event).sheet;
    //     // console.log("PLURID ROOT ", pluridRoot);
    //     // console.log("PLURID SHEET", pluridSheet);

    //     pluridStack.add(pluridRoot);
    //     plurid = style(pluridRoot, pluridStack);
    // });

    element.addEventListener('wheel', function (event) {
        if (event.shiftKey) {
            event.preventDefault();

            (0, _transforms.rotatePlurid)(event, plurid);
        }

        if (event.altKey) {
            event.preventDefault();

            (0, _transforms.translatePlurid)(event, plurid);
        }

        if (event.metaKey) {
            event.preventDefault();

            (0, _transforms.scalePlurid)(event, plurid);
        }
    });
}

/***/ }),
/* 13 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.stylePlurid = stylePlurid;
var styleString = "rgba(194, 194, 194, 0.7) 0px 0px 6px 3px";

function stylePlurid(plurid, stack) {
    // console.log(plurid);
    // console.log(stack);

    function style(stackItem) {
        if (stackItem.id === plurid.id) {
            if (plurid.style.boxShadow === styleString) {
                stackItem.style.boxShadow = "";
                plurid = document.querySelector("plurid-roots");
            } else {
                stackItem.style.boxShadow = styleString;
            }
        }

        if (stackItem.id === "plurid-roots" || stackItem.id != plurid.id) {
            stackItem.style.boxShadow = "";
        }
    }

    stack.forEach(style);

    return plurid;
}

/***/ }),
/* 14 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.initOptions = initOptions;

var _optionsCore = __webpack_require__(6);

function initOptions() {
    var pluridContainerOptions = Object.create(HTMLElement.prototype, {
        createdCallback: {
            value: function value() {
                this.id = "plurid-options";
                this.innerHTML = (0, _optionsCore.contentOptions)();
            }
        }
    });

    document.registerElement("plurid-options", {
        prototype: pluridContainerOptions
    });
}

/***/ }),
/* 15 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.initShortcuts = initShortcuts;

var _controlsCore = __webpack_require__(1);

var _getPlurid = __webpack_require__(0);

function initShortcuts() {
    document.addEventListener("keydown", function (event) {
        shortcuts(event);
    });
}

function shortcuts(event) {
    var activePluridID = _getPlurid.activePlurid.selected.id;
    var activePluridElement = document.getElementById(activePluridID);

    var ultimateKey = event.which;

    // ROTATE
    if (event.shiftKey && ultimateKey == 37) {
        console.log("Rotate Left");
    }

    if (event.shiftKey && ultimateKey == 39) {
        console.log("Rotate Right");
    }

    if (event.shiftKey && ultimateKey == 38) {
        console.log("Rotate Up");
    }

    if (event.shiftKey && ultimateKey == 40) {
        console.log("Rotate Down");
    }

    // TRANSLATE
    if (event.altKey && ultimateKey == 37) {
        console.log("Translate Left");
    }

    if (event.altKey && ultimateKey == 39) {
        console.log("Translate Right");
    }

    if (event.altKey && ultimateKey == 38) {
        console.log("Translate Up");
    }

    if (event.altKey && ultimateKey == 40) {
        console.log("Translate Down");
    }

    // SCALE
    if (event.metaKey && ultimateKey == 38) {
        console.log("Scale Up");
    }

    if (event.metaKey && ultimateKey == 40) {
        console.log("Scale Down");
    }

    // VIEW
    // alt/opt + 1
    if (event.altKey && ultimateKey == 49) {
        console.log("transform to normal view front plane");
    }

    // alt/opt + 2
    if (event.altKey && ultimateKey == 50) {
        console.log("transform to normal view right plane");
    }

    // alt/opt + 3
    if (event.altKey && ultimateKey == 51) {
        console.log("transform to normal view back plane");
    }

    // alt/opt + 4
    if (event.altKey && ultimateKey == 52) {
        console.log("transform to normal view left plane");
    }

    // THE REST OF THE SHORTCUTS
    // alt/opt + p
    if (event.altKey && ultimateKey == 80) {
        console.log("bring the parent of the current plurid to normal view");
    }

    // alt/opt + m
    if (event.altKey && ultimateKey == 77) {
        console.log("minimize current plurid");
    }

    // alt/opt + h
    if (event.altKey && ultimateKey == 72) {
        console.log("reduce height of current plurid");
    }

    // alt/opt + r
    if (event.altKey && ultimateKey == 82) {
        console.log("reload current plurid");
    }

    // alt/opt + e
    if (event.altKey && ultimateKey == 69 && !event.shiftKey) {
        console.log("extend positive the <plurid-bridge> of the current plurid");
    }

    // shift + e
    if (event.shiftKey && ultimateKey == 69 && !event.altKey) {
        console.log("extend negative the <plurid-bridge> of the current plurid");
    }

    // alt/opt + x
    if (event.altKey && ultimateKey == 88) {
        if (activePluridElement.parentElement.nodeName == "PLURID-ROOT") {
            activePluridElement.parentElement.style.display = "none";
        }

        if (activePluridElement.parentElement.nodeName == "PLURID-SCION") {
            activePluridElement.parentElement.parentElement.style.display = "none";
        }

        // console.log(activePluridElement.parentElement.parentElement.nodeName);
        // console.log(`close current plurid with ID: ${activePluridID}`);
    }

    // alt/opt + i
    if (event.altKey && ultimateKey == 73) {
        console.log("isolate current plurid");
    }

    // alt/opt + a
    if (event.altKey && ultimateKey == 65) {
        console.log("back to the previous web page within the same plurid");
    }

    // alt/opt + z
    if (event.altKey && ultimateKey == 90) {
        console.log("forward to the next web page within the same plurid");
    }

    // alt/opt + s
    if (event.altKey && ultimateKey == 83) {
        console.log("activate the plurid URL input");
    }

    // alt/opt + t
    if (event.altKey && ultimateKey == 84) {
        console.log("extract the current plurid to a separate <plurid-root>");
    }

    // alt/opt + n
    if (event.altKey && ultimateKey == 78) {
        console.log("open current plurid in new tab");
    }

    // alt/opt + f
    if (event.altKey && ultimateKey == 70) {
        console.log("flip the <plurid-branch> to the other side of the <plurid-insertion>");
    }

    // alt/opt + v
    if (event.altKey && ultimateKey == 86) {
        console.log("flip the content to the other side");
    }

    // console.log(ultimateKey);
}

/***/ }),
/* 16 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.renderBranch = renderBranch;
function renderBranch() {
    var allAnchorTags = document.getElementsByTagName("a");
    var sameOriginAnchorTags = new Set();
    var pageOrigin = window.location.origin;

    var _iteratorNormalCompletion = true;
    var _didIteratorError = false;
    var _iteratorError = undefined;

    try {
        for (var _iterator = allAnchorTags[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
            var anchorTag = _step.value;

            if (pageOrigin == anchorTag.origin) {
                sameOriginAnchorTags.add(anchorTag);
                // console.log(anchorTag);
            }
        }

        // console.log(sameOriginAnchorTags);
    } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion && _iterator.return) {
                _iterator.return();
            }
        } finally {
            if (_didIteratorError) {
                throw _iteratorError;
            }
        }
    }

    var _loop = function _loop(_anchorTag) {
        _anchorTag.addEventListener("click", function (event) {
            event.preventDefault();
            // console.log(anchorTag.href);
            // console.log(anchorTag);

            var xhttp = new XMLHttpRequest();
            xhttp.onreadystatechange = function () {
                if (this.readyState == 4 && this.status == 200) {
                    // console.log(this.responseText);
                    // pluridifyResponse(this.responseText);
                    // console.log("a");

                    var newBranch = document.createElement("plurid-branch");
                    // console.log(newBranch);

                    var newBranchContent = "\n                                            <h1>Works</h1>\n                                            <a href=\"http://localhost:8000/test/examples/insert.html\">Text</a>\n                                            <br>\n                                            <p>This is inserted:</p>\n                                            " + this.responseText + "\n                                            ";

                    newBranch.innerHTML = "\n                                            <plurid-insertion></plurid-insertion>\n                                            <plurid-bridge></plurid-bridge>\n\n                                            <plurid-scion>\n                                                <plurid-sheet>\n                                                    <plurid-content>\n                                                    " + newBranchContent + "\n                                                    </plurid-content>\n                                                </plurid-sheet>\n                                            </plurid-scion>\n                                        ";

                    insertAfter(newBranch, _anchorTag);
                    renderBranch();
                }
            };

            xhttp.open("GET", _anchorTag.href, true);
            xhttp.setRequestHeader("Cache-Control", "no-cache");
            xhttp.setRequestHeader("Pragma", "no-cache");
            xhttp.send();
        });
    };

    var _iteratorNormalCompletion2 = true;
    var _didIteratorError2 = false;
    var _iteratorError2 = undefined;

    try {
        for (var _iterator2 = sameOriginAnchorTags[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
            var _anchorTag = _step2.value;

            _loop(_anchorTag);
        }
    } catch (err) {
        _didIteratorError2 = true;
        _iteratorError2 = err;
    } finally {
        try {
            if (!_iteratorNormalCompletion2 && _iterator2.return) {
                _iterator2.return();
            }
        } finally {
            if (_didIteratorError2) {
                throw _iteratorError2;
            }
        }
    }
}

function insertAfter(newNode, referenceNode) {
    referenceNode.parentNode.insertBefore(newNode, referenceNode.nextSibling);
}

// function pluridifyResponse(response) {
//     let parser = document.createElement('body');
//     parser.innerHTML = response;

//     let anchorTags = parser.getElementsByTagName("a");

//     console.log(anchorTags);
// }

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var pluridContent = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {
            // console.log("pluridContent works");
        }
    }
});

document.registerElement("plurid-content", {
    prototype: pluridContent
});

/***/ }),
/* 18 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var pluridRoots = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {
            this.id = "plurid-roots";
        }
    }
});

document.registerElement("plurid-roots", {
    prototype: pluridRoots
});

var rootId = 1;

var pluridRoot = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {
            this.id = "plurid-root-" + rootId;
            rootId++;
        }
    }
});

document.registerElement("plurid-root", {
    prototype: pluridRoot
});

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _controls = __webpack_require__(20);

var _controlsCore = __webpack_require__(1);

var sheetId = 1;

var pluridSheet = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {
            this.id = "plurid-sheet-" + sheetId;

            if (sheetId == 1) {
                (0, _controls.initControls)();
            }

            (0, _controlsCore.renderControls)(this, sheetId);

            sheetId++;
        }
    }
});

document.registerElement("plurid-sheet", {
    prototype: pluridSheet
});

var pluridSheetDouble = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {
            // console.log("pluridSheetDouble works");
        }
    }
});

document.registerElement("plurid-sheet-double", {
    prototype: pluridSheetDouble
});

var pluridSheetDoubleFront = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {
            // console.log("pluridSheetDoubleFront works");
        }
    }
});

document.registerElement("plurid-sheet-double-front", {
    prototype: pluridSheetDoubleFront
});

var pluridSheetDoubleBack = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {
            // console.log("pluridSheetDoubleBack works");
        }
    }
});

document.registerElement("plurid-sheet-double-back", {
    prototype: pluridSheetDoubleBack
});

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.initControls = initControls;

var _controlsCore = __webpack_require__(1);

function initControls() {
    var pluridSheetControls = Object.create(HTMLElement.prototype, {
        createdCallback: {
            value: function value() {
                this.innerHTML = (0, _controlsCore.contentControls)();
                (0, _controlsCore.setControls)(this);
            }
        }
    });

    document.registerElement("plurid-controls", {
        prototype: pluridSheetControls
    });
}

/***/ }),
/* 21 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var pluridSolid = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {
            // console.log("pluridSolid works");
        }
    }
});

document.registerElement("plurid-solid", {
    prototype: pluridSolid
});

var pluridSolidFront = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {
            // console.log("pluridSolidFront works");
        }
    }
});

document.registerElement("plurid-solid-front", {
    prototype: pluridSolidFront
});

var pluridSolidBack = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {
            // console.log("pluridSolidBack works");
        }
    }
});

document.registerElement("plurid-solid-back", {
    prototype: pluridSolidBack
});

var pluridSolidTop = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {
            // console.log("pluridSolidTop works");
        }
    }
});

document.registerElement("plurid-solid-top", {
    prototype: pluridSolidTop
});

var pluridSolidBottom = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {
            // console.log("pluridSolidBottom works");
        }
    }
});

document.registerElement("plurid-solid-bottom", {
    prototype: pluridSolidBottom
});

var pluridSolidRight = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {
            // console.log("pluridSolidRight works");
        }
    }
});

document.registerElement("plurid-solid-right", {
    prototype: pluridSolidRight
});

var pluridSolidLeft = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {
            // console.log("pluridSolidLeft works");
        }
    }
});

document.registerElement("plurid-solid-left", {
    prototype: pluridSolidLeft
});

/***/ }),
/* 22 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _pageCore = __webpack_require__(23);

var pluridPage = Object.create(HTMLElement.prototype, {
    createdCallback: {
        value: function value() {
            pluridScene.content.plurid = this;
            (0, _pageCore.getPluridPage)();
            // initialize pluridScene object

            // initialize containers, options, sheets, controls
        }
    }
});

document.registerElement("plurid-page", {
    prototype: pluridPage
});

/***/ }),
/* 23 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.getPluridPage = getPluridPage;
function getPluridPage() {
    pluridScene.metadata.pages++;

    console.log(pluridScene);
}

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _transforms = __webpack_require__(2);

var plurid = _interopRequireWildcard(_transforms);

var _transformsCore = __webpack_require__(4);

var transcore = _interopRequireWildcard(_transformsCore);

var _getPlurid = __webpack_require__(0);

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

var rotateLeft = document.getElementsByClassName('plurid-container-rotate-left');
var rotateUp = document.getElementsByClassName('plurid-container-rotate-up');
var rotateRight = document.getElementsByClassName('plurid-container-rotate-right');
var rotateDown = document.getElementsByClassName('plurid-container-rotate-down');

var translateLeft = document.getElementsByClassName('plurid-container-translate-left');
var translateUp = document.getElementsByClassName('plurid-container-translate-up');
var translateRight = document.getElementsByClassName('plurid-container-translate-right');
var translateDown = document.getElementsByClassName('plurid-container-translate-down');

var scaleUp = document.getElementsByClassName('plurid-container-scale-up');
var scaleDown = document.getElementsByClassName('plurid-container-scale-down');

var moreButton = document.getElementsByClassName('plurid-container-more-button');
var moreMenu = document.getElementsByClassName('plurid-container-options-more');

var shortcutsButton = document.getElementsByClassName('plurid-container-shortcuts-button');
var shortcutsMenu = document.getElementsByClassName('plurid-container-options-shortcuts');

var pluridToTransform = document.getElementsByTagName("plurid-roots")[0];
// console.log(pluridToTransform);


var timer;

// TO DO
// fix bug when clicking and moving mouse out of the hover area


// rotateLeft[0].addEventListener("click", event => {
//     let direction = "left";
//     plurid.rotatePlurid(event, pluridToTransform, direction);
//     // console.log(event);
// })

// rotateRight[0].addEventListener("click", event => {
//     let direction = "right";
//     plurid.rotatePlurid(event, pluridToTransform, direction);
//     // console.log(event);
// })

// rotateUp[0].addEventListener("click", event => {
//     let direction = "up";
//     plurid.rotatePlurid(event, pluridToTransform, direction);
//     // console.log(event);
// })

// rotateDown[0].addEventListener("click", event => {
//     let direction = "down";
//     plurid.rotatePlurid(event, pluridToTransform, direction);
//     // console.log(event);
// })


var rotatePlurid = function rotatePlurid(event, direction) {
    plurid.rotatePlurid(event, pluridToTransform, direction);
    timer = setTimeout(rotatePlurid, 35, event, direction);
};

var translatePlurid = function translatePlurid(event, direction) {
    plurid.translatePlurid(event, pluridToTransform, direction);
    timer = setTimeout(translatePlurid, 25, event, direction);
};

var scalePlurid = function scalePlurid(event, direction) {
    plurid.scalePlurid(event, pluridToTransform, direction);
    timer = setTimeout(scalePlurid, 35, event, direction);
};

// rotation
for (var i = 0; i < rotateLeft.length; i++) {
    rotateLeft[i].addEventListener("mousedown", function (event) {
        var direction = "right";
        timer = setTimeout(rotatePlurid, 35, event, direction);
    });

    rotateLeft[i].addEventListener("mouseup", function (event) {
        clearTimeout(timer);
    });
}

for (var i = 0; i < rotateRight.length; i++) {
    rotateRight[i].addEventListener("mousedown", function (event) {
        var direction = "left";
        timer = setTimeout(rotatePlurid, 35, event, direction);
    });

    rotateRight[i].addEventListener("mouseup", function (event) {
        clearTimeout(timer);
    });
}

for (var i = 0; i < rotateRight.length; i++) {
    rotateUp[i].addEventListener("mousedown", function (event) {
        var direction = "down";
        timer = setTimeout(rotatePlurid, 35, event, direction);
    });

    rotateUp[i].addEventListener("mouseup", function (event) {
        clearTimeout(timer);
    });
}

for (var i = 0; i < rotateRight.length; i++) {
    rotateDown[i].addEventListener("mousedown", function (event) {
        var direction = "up";
        timer = setTimeout(rotatePlurid, 35, event, direction);
    });

    rotateDown[i].addEventListener("mouseup", function (event) {
        clearTimeout(timer);
    });
}

// translation
for (var i = 0; i < translateLeft.length; i++) {
    translateLeft[i].addEventListener("mousedown", function (event) {
        var direction = "left";
        timer = setTimeout(translatePlurid, 25, event, direction);
    });

    translateLeft[i].addEventListener("mouseup", function (event) {
        clearTimeout(timer);
    });
}

for (var i = 0; i < translateUp.length; i++) {
    translateUp[i].addEventListener("mousedown", function (event) {
        var direction = "up";
        timer = setTimeout(translatePlurid, 25, event, direction);
    });

    translateUp[i].addEventListener("mouseup", function (event) {
        clearTimeout(timer);
    });
}

for (var i = 0; i < translateDown.length; i++) {
    translateDown[i].addEventListener("mousedown", function (event) {
        var direction = "down";
        timer = setTimeout(translatePlurid, 25, event, direction);
    });

    translateDown[i].addEventListener("mouseup", function (event) {
        clearTimeout(timer);
    });
}

for (var i = 0; i < translateRight.length; i++) {
    translateRight[i].addEventListener("mousedown", function (event) {
        var direction = "right";
        timer = setTimeout(translatePlurid, 25, event, direction);
    });

    translateRight[i].addEventListener("mouseup", function (event) {
        clearTimeout(timer);
    });
}

// scale
for (var i = 0; i < scaleUp.length; i++) {
    scaleUp[i].addEventListener("mousedown", function (event) {
        var direction = "up";
        timer = setTimeout(scalePlurid, 35, event, direction);
    });

    scaleUp[i].addEventListener("mouseup", function (event) {
        clearTimeout(timer);
    });
}

for (var i = 0; i < scaleDown.length; i++) {
    scaleDown[i].addEventListener("mousedown", function (event) {
        var direction = "down";
        timer = setTimeout(scalePlurid, 35, event, direction);
    });

    scaleDown[i].addEventListener("mouseup", function (event) {
        clearTimeout(timer);
    });
}

// // background color

// var pluridContainerBackground = document.getElementsByClassName('plurid-container-color');


// pluridContainerBackground[0].addEventListener("click", function() {
//     var pluridBackgroundColor = window.getComputedStyle(plurid.pluridContainer[0], null).getPropertyValue("background-color");
//     if (pluridBackgroundColor == "rgb(26, 26, 26)" || pluridBackgroundColor == "rgb(25, 25, 25)") {
//         plurid.pluridContainer[0].style.backgroundColor = "hsl(0, 0%, 40%)";
//         pluridContainerBackground[0].style.backgroundColor = "hsl(0, 0%, 40%)";
//     }

//     if (pluridBackgroundColor == "rgb(102, 102, 102)") {
//         plurid.pluridContainer[0].style.backgroundColor = "hsl(0, 0%, 93%)";
//         pluridContainerBackground[0].style.backgroundColor = "hsl(0, 0%, 93%)";
//     }

//     if (pluridBackgroundColor == "rgb(238, 238, 238)") {
//         plurid.pluridContainer[0].style.backgroundColor = "hsl(0, 0%, 10%)";
//         pluridContainerBackground[0].style.backgroundColor = "hsl(0, 0%, 10%)";
//     }
// });

// // console.log(window.getComputedStyle(plurid.pluridContainer[0], null).getPropertyValue("background-color"))


// // more menu
// moreButton[0].addEventListener("click", function() {
//     moreMenu[0].classList.toggle('plurid-container-options-more-clicked');
// });


// // Scroll to Translate
// var useScrollCheckbox = document.getElementsByClassName('plurid-container-use-scroll');

// var useScrollToTranslate = useScrollCheckbox[0].checked;

// useScrollCheckbox[0].addEventListener("change", function() {
//     if (this.checked) {
//         useScrollToTranslate = 1;
//         plurid.pluridContainer[0].addEventListener('wheel', useScrollTranslation);
//         // console.log(useScrollToTranslate);
//     } else {
//         useScrollToTranslate = 0;
//         // console.log(useScrollToTranslate);
//         plurid.pluridContainer[0].removeEventListener('wheel', useScrollTranslation);
//     }
// });

// var previousScrollDeltaX = 0;
// var previousScrollDeltaY = 0;

// if (useScrollToTranslate) {
//     plurid.pluridContainer[0].addEventListener('wheel', useScrollTranslation);
// }

// function useScrollTranslation(event) {
//     event.preventDefault();

//     var currentScrollDeltaX = event.deltaX;
//     var currentScrollDeltaY = event.deltaY;

//     if (currentScrollDeltaY < 0
//         //  &&
//         //  currentScrollDeltaY == previousScrollDeltaY
//         ) {
//         // console.log('scrolling up');
//         plurid.translatePlurid(event, plurid.pluridContainer[0].children[0], "up");
//         transcore.setCursor("translate");
//     }

//     if (currentScrollDeltaY > 0
//         // &&
//         // currentScrollDeltaY == previousScrollDeltaY
//         ) {
//         // console.log('scrolling down');
//         plurid.translatePlurid(event, plurid.pluridContainer[0].children[0], "down");
//         transcore.setCursor("translate");
//     }

//     if (currentScrollDeltaX > 0
//         // &&
//         // currentScrollDeltaX == previousScrollDeltaX
//         ) {
//         // console.log('scrolling right');
//         plurid.translatePlurid(event, plurid.pluridContainer[0].children[0], "right");
//         transcore.setCursor("translate");
//     }

//     if (currentScrollDeltaX < 0
//         // &&
//         // currentScrollDeltaX == previousScrollDeltaX
//         ) {
//         // console.log('scrolling left');
//         plurid.translatePlurid(event, plurid.pluridContainer[0].children[0], "left");
//         transcore.setCursor("translate");
//     }

//     previousScrollDeltaX = currentScrollDeltaX
//     previousScrollDeltaY = currentScrollDeltaY

//     // console.log("X", event.deltaX, "|", "Y", event.deltaY);
// }


// // Shortcuts Menu
// shortcutsButton[0].addEventListener("click", function() {
//     console.log("a");
//     shortcutsMenu[0].classList.toggle('plurid-container-options-shortcuts-clicked');
// });

/***/ }),
/* 25 */
/***/ (function(module, exports) {

// removed by extract-text-webpack-plugin

/***/ })
/******/ ]);